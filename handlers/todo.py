from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from services.todo_manager import TodoManager
from datetime import datetime, timedelta

router = Router()
todo_manager = TodoManager()
router.todo_state = {}
router.todo_temp = {}

def get_todo_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton(text="‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ")],
            [KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_date_keyboard():
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(today))],
            [KeyboardButton(text=str(tomorrow))],
            [KeyboardButton(text="üìÖ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É (–†–†–†–†-–ú–ú-–î–î)")]
        ],
        resize_keyboard=True
    )

async def show_todo_menu(message: types.Message):
    await message.answer("üìù –ú–µ–Ω—é –∑–∞–≤–¥–∞–Ω—å:", reply_markup=get_todo_menu())

@router.message(F.text.in_([
    "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
    "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
    "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
    "‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ",
    "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"
]))
async def handle_todo_menu(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:")
        router.todo_state[user_id] = "awaiting_task"

    elif text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
        dates = todo_manager.get_dates(user_id)
        if not dates:
            await message.answer("‚úÖ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.")
            return await show_todo_menu(message)
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=d)] for d in dates], resize_keyboard=True)
        await message.answer("üìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=date_keyboard)
        router.todo_state[user_id] = "choosing_day"

    elif text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
        dates = todo_manager.get_dates(user_id)
        if not dates:
            await message.answer("‚úÖ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.")
            return await show_todo_menu(message)
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=d)] for d in dates], resize_keyboard=True)
        await message.answer("üìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É —Å–ø–∏—Å–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=date_keyboard)
        router.todo_state[user_id] = "awaiting_delete_date"

    elif text == "‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ":
        dates = todo_manager.get_dates(user_id)
        if not dates:
            await message.answer("‚úÖ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.")
            return await show_todo_menu(message)
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=d)] for d in dates], resize_keyboard=True)
        await message.answer("üìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É —Å–ø–∏—Å–∫—É –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=date_keyboard)
        router.todo_state[user_id] = "awaiting_done_date"

    elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é":
        from handlers.main_menu import send_welcome
        await send_welcome(message)

@router.message(F.text)
async def handle_task_steps(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = router.todo_state.get(user_id)

    if state == "awaiting_task":
        router.todo_temp[user_id] = {"task": text}
        await message.answer("üìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=get_date_keyboard())
        router.todo_state[user_id] = "awaiting_date"

    elif state == "awaiting_date":
        if text.lower().startswith("üìÖ"):
            await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:")
            return
        try:
            date = str(datetime.strptime(text, "%Y-%m-%d").date())
        except Exception:
            return await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        task = router.todo_temp[user_id].get("task")
        todo_manager.add_task(user_id, task, date)
        await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.")
        router.todo_state[user_id] = None
        router.todo_temp[user_id] = None
        await show_todo_menu(message)

    elif state == "choosing_day":
        tasks = todo_manager.get_tasks(user_id, text)
        if tasks:
            task_list = "\n".join(f"{i+1}. {'‚úÖ' if t[1] else 'üïì'} {t[0]}" for i, t in enumerate(tasks))
            await message.answer(f"üìã –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {text}:\n{task_list}")
        else:
            await message.answer("‚ùå –ó–∞–≤–¥–∞–Ω—å –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î.")
        router.todo_state[user_id] = None
        await show_todo_menu(message)

    elif state == "awaiting_delete_date":
        router.todo_temp[user_id] = {"date": text}
        tasks = todo_manager.get_tasks(user_id, text)
        if tasks:
            task_list = "\n".join(f"{i+1}. {'‚úÖ' if t[1] else 'üïì'} {t[0]}" for i, t in enumerate(tasks))
            await message.answer(f"üóë –û–±–µ—Ä–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n{task_list}\n‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è:")
            router.todo_state[user_id] = "awaiting_delete_index"
        else:
            await message.answer("‚ùå –ó–∞–≤–¥–∞–Ω—å –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î.")
            router.todo_state[user_id] = None
            await show_todo_menu(message)

    elif state == "awaiting_delete_index":
        try:
            index = int(text) - 1
            date = router.todo_temp[user_id].get("date")
            todo_manager.delete_task(user_id, date, index)
            await message.answer("üóë –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä.")
        router.todo_state[user_id] = None
        router.todo_temp[user_id] = None
        await show_todo_menu(message)

    elif state == "awaiting_done_date":
        router.todo_temp[user_id] = {"date": text}
        tasks = todo_manager.get_tasks(user_id, text)
        if tasks:
            task_list = "\n".join(f"{i+1}. {'‚úÖ' if t[1] else 'üïì'} {t[0]}" for i, t in enumerate(tasks))
            await message.answer(f"‚òëÔ∏è –û–±–µ—Ä–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ:\n{task_list}\n‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è:")
            router.todo_state[user_id] = "awaiting_done_index"
        else:
            await message.answer("‚ùå –ó–∞–≤–¥–∞–Ω—å –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î.")
            router.todo_state[user_id] = None
            await show_todo_menu(message)

    elif state == "awaiting_done_index":
        try:
            index = int(text) - 1
            date = router.todo_temp[user_id].get("date")
            todo_manager.mark_done(user_id, date, index)
            await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.")
        except:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä.")
        router.todo_state[user_id] = None
        router.todo_temp[user_id] = None
        await show_todo_menu(message)